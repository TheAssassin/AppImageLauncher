name: Continuous builds

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - NAME: Packages x86_64
            RUNS_ON: ubuntu-24.04
            DOCKER_PLATFORM: linux/amd64
          - NAME: Packages arm64
            RUNS_ON: ubuntu-24.04-arm
            DOCKER_PLATFORM: linux/arm64/v8
          - NAME: Packages armhf
            RUNS_ON: ubuntu-24.04-arm
            DOCKER_PLATFORM: linux/arm/v7
          - NAME: Lite AppImage x86_64
            RUNS_ON: ubuntu-24.04
            DOCKER_PLATFORM: linux/amd64
            BUILD_LITE: 1

    name: ${{ matrix.NAME }}
    env:
      DOCKER_PLATFORM: ${{ matrix.DOCKER_PLATFORM }}
      DIST: ${{ matrix.DIST }}
      BUILD_LITE: ${{ matrix.BUILD_LITE }}
    runs-on: ${{ matrix.RUNS_ON }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build ${{ matrix.NAME }}
          path: |
              appimagelauncher*.deb*
              appimagelauncher*.rpm*
              appimagelauncher*.tar*
              appimagelauncher-lite-*.AppImage*

  upload:
    name: Create release and upload artifacts
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Inspect directory after downloading artifacts
        run: ls -alFR
      - name: Create release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
          WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
          WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}
          APPIMAGE_EXTRACT_AND_RUN: 1
        run: |
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/appimagelauncher*.{deb,rpm,tar*,AppImage*}
